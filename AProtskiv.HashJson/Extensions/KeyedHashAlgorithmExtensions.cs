using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;

namespace AProtskiv.HashJson.Extensions
{


    public static class KeyedHashAlgorithmExtensions
    {
        public static KeyedHashAlgorithm WithSalt(this KeyedHashAlgorithm algorithm, string salt)
        {
            
            algorithm.Key = Encoding.Unicode.GetBytes(salt 
                    ?? String.Empty
                    // set to hash of String.Empty, otherwise KEY(SALT) may be default (autogenerated)
                ); 
            

            return algorithm;
        }

        private static readonly IReadOnlyList<Assembly> CryptoAssemblies = new List<Assembly> {
                typeof(HMACSHA1).Assembly,
                typeof(KeyedHashAlgorithm).Assembly
            }.Distinct().ToList();

        private static readonly Lazy<IReadOnlyList<Type>> HMACAlgorithmsTypes = new Lazy<IReadOnlyList<Type>>(() => GetHMACAlgorithmsTypes().ToList());

        public static IEnumerable<Type> GetHMACAlgorithmsTypes()
        {
            var hmacBaseType = typeof(HMAC);

            foreach (var assembly in CryptoAssemblies)
            {
                foreach (var t in assembly.GetTypes())
                {
                    if (t.IsSubclassOf(hmacBaseType))
                    {
                        yield return t;
                    }
                }
            }
        }

        public static IEnumerable<string> GetHMACAlgorithmsNames()
        {
            return HMACAlgorithmsTypes.Value.Select(x => x.Name);
        }

        /// <summary>
        /// Creates a HMAC*** KeyedHashAlgorithm
        /// </summary>
        /// <param name="algorithm"></param>
        /// <param name="salt"></param>
        /// <returns></returns>
        /// <remarks>
        /// List of HMAC algorithms <seealso cref="https://learn.microsoft.com/en-us/dotnet/api/system.security.cryptography.hmac?view=net-8.0"/>
        /// </remarks>
        /// <exception cref="InvalidOperationException" />
        public static KeyedHashAlgorithm CreateWithSalt(string algorithm, string salt)
        {
            string hmacAlgorithmName = algorithm.ToUpperInvariant();

            var hmacBaseType = typeof(HMAC);
            var HMAC_PREFIX = hmacBaseType.Name;

            if (!hmacAlgorithmName.StartsWith(HMAC_PREFIX))
            {
                hmacAlgorithmName = HMAC_PREFIX + hmacAlgorithmName;
            }           
            
            var hmacAlgorithmType = HMACAlgorithmsTypes.Value
                .FirstOrDefault(x => x.Name.Equals(hmacAlgorithmName, StringComparison.InvariantCultureIgnoreCase));

            if (hmacAlgorithmType != null)
            {
                object hmacAlgorithm;
                try
                {
                    hmacAlgorithm = Activator.CreateInstance(hmacAlgorithmType);
                    if (hmacAlgorithm is KeyedHashAlgorithm keyedHashAlgorithm)
                    {
                        return keyedHashAlgorithm.WithSalt(salt);
                    }
                }
                catch
                {
                }
            }

            throw new InvalidOperationException($"KeyedHashAlgorithm '{algorithm}' is not supported");
        }
    }
}
